#################################################
# Canine Distemper in Sea lion population model #
#                                               #
#                    INDEX                      #
#                0. parameters                  #
#              1. populate arrays               #
#               2. calculations                 #
#         3. initializing caluculations         #
#               4.  simulation                  #
#                5. graph it                    #
#                                               #
#################################################

rm(list=ls()) # all clear!
set.seed(pi) # add your favourtite number!

# function to example the corners of large 2D datasets, set rowcol = T to see the preiferal rows and columns
check <- function(x , size = 3 , rowcol = F){
  print("Upperleft")
  print(x[1:size,1:size])
  print("Bottomleft")
  print(x[(nrow(x)-(size-1)):nrow(x),1:size])
  print("Upperright")
  print(x[1:size,(ncol(x)-(size-1)):ncol(x)])
  print("Bottomright")
  print(x[(nrow(x)-(size-1)):nrow(x),(ncol(x)-(size-1)):ncol(x)])
  if (rowcol == T) {
    print("Firstrow")
    print(x[1,])
    print("Lastrow")
    print(x[nrow(x),])
    print("Firscolumn")
    print(x[,1])
    print("Lastcolumn")
    print(x[,ncol(x)])
  }
}

print(Sys.time())
epsilons <- c(0, 0.25, 0.5, 1, 2)

# 0. INITIAL CONDITIONS
# model parameters
# epsilon_D <- silon # spatial decay for dogs
# epsilon_SL <- silon # spatial decay for sea lions
scalek <- 1 # km (each pack occupies a (scale X scale) km^2 grid cell)
beta_D <- 0.2 # intraspecific contact rate for dogs, kindofgotten from almberg et al. for the coyotes?
beta_SL <- 0.38 # intraspecific contact rate for sea lions, gottem from phocine distemper paper 1998
beta_prime <- 2.3e-2 # interspecies contact rate, from Brock
sigma <- 1/7 # 1/average latent period
gamma <- 1/2 # 1/average infectious period
delta <- 5e-1 # death due to disease
sdd <- 1 - delta # average daily survival of infected individuals
muD.dogs <- 8.0e-4 # average daily death of non-infected individuals
muD.sealions <- 4.1e-4 # gotten from phocine distemper paper
muB.dogs <- 8.0e-4
# time
years <- 10
annum <- 365
time <- years*annum+1
BP <- 112
# space
island.rows <- 6
island.columns <- 6
total.cells <- island.rows*island.columns
# populations parameters
packs <- total.cells
#total.dogs <- 200 # controls the density of dogs per pack
#total.sealions <- 200
#packs.dogs <- (sqrt(total.cells)-2)^2 # number of packs of dogs that occupy all cells
#dogs <- ceiling(total.dogs/packs.dogs) # number of dogs per pack
dogs <- 1
#packs.sealions <- total.cells - packs.dogs
#sealions <- ceiling(total.sealions/packs.sealions) # number of sea lions per pack
sealions <- 1
# birth pulse parameters
gender.split <- 0.5 # the proportion of the population that is female
prop.rep <- 0.5 # the proportion of the population that has reproductive potential
prop.survive <- 0.95 # proportion of sea lion pups that survive birth
tt <- 1
total.born<- vector(length=10, mode="numeric")


# 1. populate arrays
# Matrices for recording dog data
S_D <- array(0 , dim = c(packs, time)) # Susceptibles 
E_D <- array(0 , dim = c(packs, time)) # Exposed
I_D <- array(0 , dim = c(packs, time)) # Infected
R_D <- array(0 , dim = c(packs, time)) # Recovered
D_D <- array(0 , dim = c(packs, time)) # Death
TD_D <- array(0 , dim = c(packs, time)) # total death
# Adds susceptibles in each pack
for(i in 1:packs){
  S_D[i, 1] <- dogs
}

# Matrices for recording sea lion data
S_SL <- array(0 , dim = c(packs, time)) # susceptibles 
E_SL <- array(0 , dim = c(packs, time)) # exposed
I_SL <- array(0 , dim = c(packs, time)) # infected
R_SL <- array(0 , dim = c(packs, time)) # recovered
D_SL <- array(0 , dim = c(packs, time)) # death
TD_SL <- array(0 , dim = c(packs, time)) # total death
# for(i in 1:packs){
#   S_SL[i, 1] <- sealions
# }

muB <- array(0 , dim = c(packs, 365))
#muB[,1:BP] <- 0 # this is redundant

vac_SL <- array(0 , dim = c(1, 365))
vac_D <- array(0 , dim = c(1, 365))
#vac_D[364] <- 0.25  
#vac_SL[] <- x

#adds sea lions on the perimeter, erases dogs from perimeter
for(i in 1:(sqrt(packs)+1)) 
{ S_SL[i, 1] <- sealions
S_D[i, 1] <- 0  
}
for(j in 2:(sqrt(packs)-1))
{ x = (j * sqrt(packs)) 
S_SL[x, 1] <- sealions
S_D[x, 1] <- 0
y = (j * (sqrt(packs)) +1) 
S_SL[y, 1] <- sealions
S_D[y, 1] <- 0
}
for(i in (packs - sqrt(packs) + 1):(packs)) 
{ S_SL[i, 1] <- sealions
S_D[i, 1] <- 0
}
#create an array for muB

# lambda arrays
lambda_D <- matrix(0, nrow = packs, ncol = 1) # this is the lambda matrix which resets for every value of time
lambda_SL <- matrix(0, nrow = packs, ncol = 1) # this is the lambda matrix which resets for every value of time

# 2. FUNCTIONS
dist_factor <- # function that does the distance dependent part of the lambda equation
  function(I, epsilon, distance) {
    Ival <- I[j, tt-1] # can be I_D or I_SL
    distval <- distance[i, j]
    Ival*exp(-epsilon*distval) #uses beginning of the equation and puts number in x
  }
lambda_func <- # function that finishes the equation once all are calculated
  function(beta, beta_prime, I, dfval, interspecies){
    Ival <- I[i, tt-1]  # can be I_D or I_SL
    1 - exp(-((beta*dfval) + (beta_prime*interspecies))) # finishes the lambda equation
  }
S_D_func <- #function for S dogs
  function(lambda, S, E, I, R, muD, muB, vac) { 
    lambdaval <- lambda[k]
    Sval_1 <- S[k, tt-1]
    Eval <- E[k, tt-1]
    Ival <- I[k, tt-1]
    Rval <- R[k, tt-1]
    Sval_2 <- Sval_1 - muD*Sval_1
    total <- Sval_2 + Eval + Ival + Rval
    Sval_3 <- Sval_2 + muB*total
    Sval_4 <- Sval_3 - lambdaval*Sval_3
    Sval_4 - vac[1, t-1]*Sval_4
  }
S_SL_func <- #function for S sealions
  function(lambda, S, E, I, R, muD, muB, vac) { 
    lambdaval <- lambda[k]
    Sval_1 <- S[k, tt-1]
    Eval <- E[k, tt-1]
    Ival <- I[k, tt-1]
    Rval <- R[k, tt-1]
    Sval_2 <- Sval_1 - muD*Sval_1 
    Sval_3 <- Sval_2 + muB[k, t-1]
    Sval_4 <- Sval_3 - lambdaval*Sval_3
    Sval_4 - vac[1, t-1]*Sval_4    
  }
E_func <- # function for the individuals in the exposed class, not get contageous
  function(lambda, sigma, S, E, muD){
    Eval_1 <- E[k, tt-1]
    lambdaval <- lambda[k]
    Sval <- S[k, tt-1]
    Eval_2 <- Eval_1 + muD*Eval_1
    Eval_3 <- Eval_2 - sigma*Eval_2
    Eval_3 + lambdaval*Sval
  }
I_func <- # function for individuals in the infectious class
  function (sigma, gamma, delta, E, I, muD) {
    Eval <- E[k, tt-1]
    Ival_1 <- I[k, tt-1]
    Ival_2 <- Ival_1 - muD*Ival_1
    Ival_3 <- Ival_2 - delta*Ival_2
    Ival_4 <- Ival_3 - gamma*Ival_3 
    Ival_4 + sigma*Eval
  }
R_func <- # function for individuals in the recovered class
  function(gamma, S, I, R, muD, vac) {
    Rval_1 <- R[k, tt-1]
    Ival <- I[k, tt-1]
    Sval <- S[k, tt-1] 
    Rval_2 <- Rval_1 - muD*Rval_1
    Rval_2 + gamma*Ival + vac[1, t-1]*Sval
  }
D_func <- 
  function(delta, I, muD) {
    Ival <- I[k, tt-1]
    Ival.D <- Ival - muD*Ival
    delta*Ival.D
  }
TD_func <- 
  function(delta, S, E, I, R, D, muD) {
    Sval <- S[k, tt-1]
    Eval <- E[k, tt-1]
    Ival <- I[k, tt-1]
    Rval <- R[k, tt-1]
    Dval <- D[k, tt-1]
    delta*Ival + muD*Sval + muD*Rval + muD*Eval + muD*Ival
  }
my_distance_set1 <- function(scale, iRow, iCol, jRow, jCol) {
  scale*sqrt((iRow-jRow)^2 + (iCol-jCol)^2);
}
my_distance_set2 <- function(x, scale) {
  dist <- array(data = 0  , dim = c(x, x))
  for (i in 1:x){
    iRow <- ceiling(i/sqrt(x))
    iCol <- i - (iRow-1)*sqrt(x)
    for (j in 1:x) {
      jRow <- ceiling(j/sqrt(x))
      jCol <- j - (jRow-1)*sqrt(x)
      dist[i, j] <- my_distance_set1(scale, iRow, iCol, jRow, jCol)
    }
  }
  print(dist)
}

births_func <-
  function(S, E, I, R, gender.split, prop.rep, prop.survive) {
    total.alive <- S[q, tt] + E[q, tt] + I[q, tt] + R[q, tt]
    new.pups <- total.alive*gender.split*prop.rep
    live.pups <- prop.survive*new.pups
    per.day <- live.pups/BP
    per.day
  }

# 3. initializing caluculations
dog_dist <- my_distance_set2(total.cells, scalek)
sealion_dist <- my_distance_set2(total.cells, scalek)
lattice_size <- dim(dog_dist) # calculates the size to use for i and j (currently 9 and 9)
